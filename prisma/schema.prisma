generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////
// NextAuth required models //
//////////////////////////////
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model users {
  id        Int @id @default(autoincrement())  
  name      String?
  email     String
  password  String?
  booksHave booksHave[]
  booksBorrows  BorrowsBooks[]
  booksGiven  Booksgiven[]
}

model Booksgiven{
  id Int @id @default(autoincrement())
  booksName String
  cover String?
  givenDate DateTime @default(now())
  Ggivento users @relation(fields: [givenTo], references: [id])
  givenTo Int
}

model BorrowsBooks{
  id Int @id @default(autoincrement())
  booksName String
  cover String?
  borrowDate DateTime @default(now())
  BborrowFrom users @relation(fields: [borrowFrom], references: [id])
  borrowFrom Int
}

model booksHave{
  id Int @id @default(autoincrement())
  bookname String 
  cover String?
  publishDate DateTime @default(now())
  owner users  @relation(fields: [ownerId], references: [id])
  ownerId Int
  status statusType @default(AVAILABLE)
}

enum statusType{
  AVAILABLE
  GIVEN
}
